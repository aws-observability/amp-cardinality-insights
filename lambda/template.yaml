AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  amp-ingestion-insights

  Sample SAM Template for amp-ingestion-insights

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Tags:
      Project: "AMP Ingestion Insights"

Parameters:
  WorkspaceId:
    Type: String
    Description: Prometheus Workspace ID (not remote write URL)
      #ScheduleRate:
      #Type: String
      #Default: rate(30 minutes)
      #Description: Interval to run cardinality metrics collection
  TopNCardValue:
    Type: Number
    Default: "10"
    Description: Top cardinality metrics contributors number (ex. Top 10, 20...)
  MetricNamesFunctionRoleARN:
    Type: String
    Description: Lambda Function Role
  CountMetricsFunctionRoleARN:
    Type: String
    Description: Lambda Function Role
  CountMetricsBatchSize:
    Type: Number
    Default: "10"
    Description: Lambda Batch size for CountMetricsFunction
  AggregateCountFunctionRoleARN:
    Type: String
    Description: Lambda Function Role
  AggregateCountBatchSize:
    Type: Number
    Default: "10000"
    Description: Lambda Batch size for AggregateCountFunction
  AggregateCountMaxBatchingWindow:
    Type: Number
    Default: "300"
    Description: Maximum time in seconds to wait for batching
  IngestAMPFunctionRoleARN:
    Type: String
    Description: Lambda Function Role
  IngestAMPBatchSize:
    Type: Number
    Default: "10"
    Description: Lambda Batch size for IngestAMPFunction

Resources:
  MetricsCountQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: "Project"
          Value: "AMP Ingestion Insights"

  AggregateCountsQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: "Project"
          Value: "AMP Ingestion Insights"

  IngestAMPQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: "Project"
          Value: "AMP Ingestion Insights"

  MetricNamesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: metric-names/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
          #Events:
          #CloudWatchEvent:
          #Type: Schedule
          #Properties:
          #  Schedule: !Ref ScheduleRate
      Environment:
        Variables:
          AMP_WORKSPACE_ID: !Sub "${WorkspaceId}"
          SQS_QUEUE_URL: !Ref MetricsCountQueue
      Role: !Ref MetricNamesFunctionRoleARN

  CountMetricsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: count-metrics/
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 600
      Architectures:
        - x86_64
      Events:
        PollMetrics:
          Type: SQS
          Properties:
            Queue: !GetAtt MetricsCountQueue.Arn
            BatchSize: !Ref CountMetricsBatchSize
      Environment:
        Variables:
          AMP_WORKSPACE_ID: !Sub "${WorkspaceId}"
          SQS_QUEUE_URL: !Ref AggregateCountsQueue
      Role: !Ref CountMetricsFunctionRoleARN

  # this function does the first level reducing based on the message attributes
  AggregateCountFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: aggregate-counts/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        PollMetrics:
          Type: SQS
          Properties:
            Queue: !GetAtt AggregateCountsQueue.Arn
            BatchSize: !Ref AggregateCountBatchSize
            MaximumBatchingWindowInSeconds: !Ref AggregateCountMaxBatchingWindow
      Environment:
        Variables:
          AGGREGATE_QUEUE_URL: !Ref AggregateCountsQueue
          INGEST_QUEUE_URL: !Ref IngestAMPQueue
          TOPN_CARDINALITY_VALUE: !Ref TopNCardValue
      Role: !Ref AggregateCountFunctionRoleARN

  IngestAMPFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/>
    Properties:
      CodeUri: ingest-amp/
      Handler: handler.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-python-amd64-ver-1-19-0:1"
      Events:
        PollMetrics:
          Type: SQS
          Properties:
            Queue: !GetAtt IngestAMPQueue.Arn
            BatchSize: !Ref IngestAMPBatchSize
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: "/opt/otel-instrument"
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: "/var/task/collector.yaml"
      Role: !Ref IngestAMPFunctionRoleARN
